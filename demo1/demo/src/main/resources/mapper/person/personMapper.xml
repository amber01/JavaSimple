<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 指定工作空间，要与接口名相同，源代码没有去看，猜测应该是通过"这里的namespace.下边方法的id"来定位方法的 -->
<mapper namespace="com.example.demo.mybatisDemo.mapper.PersonMapper">  <!-- 可以直接输入PersonMapper类名吗 -->

    <resultMap type="com.example.demo.mybatisDemo.entity.Person" id="BaseResultMap">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="age" jdbcType="INTEGER" property="age" />
        <result column="name" jdbcType="VARCHAR" property="name" />
    </resultMap>

    <!--<select id="selectAll" resultType="com.example.demo.mybatisDemo.entity.Person">-->
         <!--select *from person-->
    <!--</select>-->

    <select id="selectAll" resultMap="BaseResultMap">
         select *from person
    </select>


    <!--select *from person where 1=1-->
    <!--<if test="arg0 != null and arg0 !='' ">  &lt;!&ndash;name不等于null和空的情况下执行下面字段&ndash;&gt;-->
    <!--and name = #{arg0}-->
    <!--</if>-->

    <!--<if test="arg1 != null and arg1 !='' ">  &lt;!&ndash;email不等于null和空的情况下执行下面字段&ndash;&gt;-->
    <!--and email = #{arg1}-->
    <!--</if>-->

    <!--判断name与email都不等于null和空的情况下执行  parameterType="Person"-->
    <!--select *from person where 1=1 and name = #{arg0} and email = #{arg1}-->
    <!--可以将下面的表达形式改成用where来写，这样更简洁-->
    <select id="selectAll1" resultMap="BaseResultMap">
        select * from person
          <where>
              <if test="arg0 != null and arg0 !='' ">
                and name = #{arg0}
            </if>
            <if test="arg1 != null and arg1 !='' ">
                and email = #{arg1}
            </if>
        </where>
    </select>

    <select id="findById" parameterType="int" resultMap="BaseResultMap">
        select * from person where id=#{id}
    </select>

    <delete id="deleteById" parameterType="int">
        delete from person where id=#{id}
    </delete>

    <!--根据id修改用户名或邮箱-->
    <update id="updatePerson">
        <if test="id!=null and id !=''">
            update
            person
            <set>
                <if test="name != null and name !=''">
                    name = #{name},
                </if>
                <if test="email != null and email !=''">
                    email = #{email},
                </if>
            </set>
            where  id = #{id};
        </if>
    </update>

    <!--通过类似java的switch语句来判断，choose（when，otherwise）-->
    <select id="selectAll2" resultMap="BaseResultMap">
        select *from
        <choose>
            <when test="name !=null and name !='' ">  <!--如果条件满足就不往下走了，和switch一样-->
                name = #{name}
            </when>
            <when test="email !=null and email !='' ">
                email = #{email}
            </when>
            <otherwise>  <!-- switch中的default -->

            </otherwise>
        </choose>
    </select>


    <!--通过foreach来传入list参数查询并返回结果-->
    <select id="selectAll3" resultMap="BaseResultMap">
        select *from person where id in
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

</mapper>